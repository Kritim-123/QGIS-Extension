# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MultipleShapeFileDialog
                                 A QGIS plugin
 Creates multiple shape file from the list
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-17
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Kritim Bastola
        email                : kritimbastola2005@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QMessageBox #To show the pop-up
import shutil
import pandas as pd

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Multiple_Shape_File_dialog_base.ui'))


def getFileFromHeading(file_path):
    if file_path.endswith('.csv'):
        df = pd.read_csv(file_path, delimiter='t')
    elif file_path.endswith(('.xls', '.xlsx')):
        df = pd.read_excel(file_path)
    else:
        raise ValueError("Unsupported file type. Please provide a CSV or Excel File")

    internal_taxon_elements = df['internal_taxon_name'].tolist()
    return internal_taxon_elements


class MultipleShapeFileDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MultipleShapeFileDialog, self).__init__(parent)
        self.setupUi(self)

        self.destination_path = "" #To carry the address of the file later
        self.input_toolButton.clicked.connect(self.toolButtonClicked) #Connecting to a function

        # Initialize the variable to store the selected file type in RadioBoxes
        self.selected_file_type = None
        self.file_type_selected = False

        #Variable to indicate that there is a heading named as internal_taxon_name
        self.heading_exists = False

        # Connect radio buttons to the custom method
        self.point_radioButton.clicked.connect(self.radioButtonClicked)
        self.Polygen_radioButton.clicked.connect(self.radioButtonClicked)

        #Downloads a example file
        self.pushButton.clicked.connect(self.pushButtonClicked)

        #Click at the very end
        self.button_box.accepted.connect(self.buttonBoxClicked)

        self.output_toolButton.clicked.connect(self.outputToolButtonClicked)

        #To store all the file name from internal_taxon_name
        self.target_heading_content = []

        #Destination
        self.output_directory = ""

        self.destination_found = False

        self.folder_path = ""


    def outputToolButtonClicked(self):
        self.output_directory = QFileDialog.getExistingDirectory(self, "Select Destination Folder")

        self.output_lineEdit.setText(self.output_directory)

        self.destination_found = True


    def toolButtonClicked(self):
        # Open a directory dialog
        directory = QFileDialog.getOpenFileName(self, "Select Destination Folder")
        target_heading = "internal_taxon_name"

        self.input_lineEdit.setText(directory)


        try:
            with open(directory, 'r') as file:
                first_line = file.readline()

                if target_heading in first_line:
                    self.heading_exists = True

        except FileNotFoundError:
            QMessageBox.warning(self, "No File Found. Please try again")
        except Exception as e:
            print(f"An error occurred: {e}")

        if self.heading_exists:
            self.target_heading_content = getFileFromHeading(directory)

    def radioButtonClicked(self):
        # Identify which radio button was clicked and update self.selected_file_type

        current_directory = os.path.dirname(os.path.abspath(__file__))
        sender = self.sender()
        if sender == self.point_radioButton:
            self.selected_file_type = "Point"
            self.file_type_selected = True
            folder_name = "pointTemplate"
            self.folder_path = os.path.join(current_directory, folder_name)

        elif sender == self.Polygen_radioButton:
            self.selected_file_type = "Polygon"
            self.file_type_selected = True
            folder_name = "polygonTemplate"
            self.folder_path = os.path.join(current_directory, folder_name)

    def pushButtonClicked(self):
        # Use self.selected_file_type as needed, e.g., for processing the chosen file type
        print("Selected File Type:", self.selected_file_type)

    def buttonBoxClicked(self):
        if self.file_type_selected & self.destination_found:

            for name in self.target_heading_content:
                source_path = self.folder_path
                destination_path = f"{destination_path}/{name}_{self.selected_file_type}"

                try:
                    shutil.copytree(source_path, destination_path)

                except FileExistsError:
                    print("File is already there. Skipping")

            #Showing pop-up after the file has been downloaded
            msg = QMessageBox() # Creating an instance of the MessageBox
            msg.setWindowTitle("Sucess!") #Setting the title of the window
            msg.setText("You have succesfully download the file in the located folder.") # The actual message
            msg.setIcon(QMessageBox.Information) #sets the icon of the pop-up
            msg.setDetailedText("Go to location you previously selected to find the files.") #Gives information on where to find the files

        else:
            msg = QMessageBox()
            msg.setWindowTitle("Failed!")
            msg.setText("There is some error. Please input valid information in necessary File")



